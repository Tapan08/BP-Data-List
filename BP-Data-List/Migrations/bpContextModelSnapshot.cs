// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TPAssignment_1.Models;

#nullable disable

namespace TPAssignment_1.Migrations
{
    [DbContext(typeof(bpContext))]
    partial class bpContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TPAssignment_1.Models.BP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("PositionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("diastolicValues")
                        .HasColumnType("int");

                    b.Property<int>("systolic")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.ToTable("BloodPressures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 10, 12, 21, 59, 23, 809, DateTimeKind.Utc).AddTicks(738),
                            PositionId = "S",
                            diastolicValues = 80,
                            systolic = 120
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 10, 12, 21, 59, 23, 809, DateTimeKind.Utc).AddTicks(743),
                            PositionId = "S1",
                            diastolicValues = 60,
                            systolic = 100
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2023, 10, 12, 21, 59, 23, 809, DateTimeKind.Utc).AddTicks(745),
                            PositionId = "L",
                            diastolicValues = 100,
                            systolic = 140
                        });
                });

            modelBuilder.Entity("TPAssignment_1.Models.Position", b =>
                {
                    b.Property<string>("PositionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PositionId");

                    b.ToTable("Position");

                    b.HasData(
                        new
                        {
                            PositionId = "S",
                            Name = "Standing"
                        },
                        new
                        {
                            PositionId = "S1",
                            Name = "Siting"
                        },
                        new
                        {
                            PositionId = "L",
                            Name = "Lying Down"
                        });
                });

            modelBuilder.Entity("TPAssignment_1.Models.BP", b =>
                {
                    b.HasOne("TPAssignment_1.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");
                });
#pragma warning restore 612, 618
        }
    }
}
